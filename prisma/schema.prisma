generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider              = "prisma-json-schema-generator"
  includeRequiredFields = "true"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  created_at               DateTime @default(now()) @db.Timestamptz(6)
  update_at                DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime @db.Timestamptz(6)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  update_at    DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          Role      @default(USER)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  update_at     DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  update_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([identifier, token])
  @@map("verification_token")
}

enum Locale {
  EN
  KO
}

model Review {
  id         String   @id @default(cuid())
  user_id    String?
  writer     String
  title      String
  content    String
  score      Float
  is_best    Boolean  @default(false)
  locale     Locale   @default(EN)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  update_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("review")
}
